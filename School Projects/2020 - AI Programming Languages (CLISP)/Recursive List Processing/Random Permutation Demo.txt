[1]> ( load "RecursiveListProcessing.lisp" )
;; Loading file RecursiveListProcessing.lisp ...
;; Loaded file RecursiveListProcessing.lisp
T
[2]> ( random-permutation '(a b c d e f g) )
(E F B D A C G)
[3]> ( random-permutation '(1 2 3 4 5) )
(2 5 3 1 4)
[4]> ( random-permutation '(cat dog horse fly chicken) )
(CHICKEN FLY HORSE DOG CAT)
[5]> ( random-permutation '((not c) (if b c) (if a b)) )
((NOT C) (IF B C) (IF A B))
[6]> ( random-permutation '((not c) (if b c) (if a b)) )
((IF A B) (IF B C) (NOT C))
[7]> ( random-permutation '((a) b (c) (d e) f (g)) )
((D E) F (A) (C) B (G))
[8]> ( trace random-permutation )
;; Tracing function RANDOM-PERMUTATION.
(RANDOM-PERMUTATION)
[9]> ( random-permutation '(1 2 3 4 5 6) )
1. Trace: (RANDOM-PERMUTATION '(1 2 3 4 5 6))
2. Trace: (RANDOM-PERMUTATION '(2 3 4 5 6))
3. Trace: (RANDOM-PERMUTATION '(2 3 4 5))
4. Trace: (RANDOM-PERMUTATION '(2 3 4))
5. Trace: (RANDOM-PERMUTATION '(2 4))
6. Trace: (RANDOM-PERMUTATION '(2))
6. Trace: RANDOM-PERMUTATION ==> (2)
5. Trace: RANDOM-PERMUTATION ==> (4 2)
4. Trace: RANDOM-PERMUTATION ==> (3 4 2)
3. Trace: RANDOM-PERMUTATION ==> (5 3 4 2)
2. Trace: RANDOM-PERMUTATION ==> (6 5 3 4 2)
1. Trace: RANDOM-PERMUTATION ==> (1 6 5 3 4 2)
(1 6 5 3 4 2)
[10]> ( bye )